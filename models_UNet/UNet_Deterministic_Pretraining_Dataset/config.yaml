experiment:
  batch_size: 32
  num_workers: 4
  quick_test: false
# Input channels: [precip, temp, temp_min, temp_max, elevation]
# Output channels: [precip, temp, temp_min, temp_max]
variables:
  input:
    precip: precip
    temp: temp
    temp_min: temp_min
    temp_max: temp_max
  target:
    precip: precip
    temp: temp
    temp_min: temp_min
    temp_max: temp_max

preprocessing:
  nan_to_num: true
  nan_value : 0.0


train:
  num_epochs: 50
  checkpoint_path: best_model_pretraining_FULL.pth
  inference_weights_path: best_model_weights_pretraining_FULL.pth
  model_config_path: model_config_pretraining_FULL.json
  in_channels: 5
  out_channels: 4
  optimizer: "Adam"
  loss_fn: "MSE"
  
  #scheduler: "CyclicLR"
  #scheduler_mode: "triangular2"
  #base_lr: 1e-4
  #max_lr: 1e-3
  #step_size_up: 208

  #scheduler: "StepLR"
  #gamma: 0.1
  #step_size: 2 #Every 2 epochs, it is reducing the learning rate by 10 percent. Customisable and overridable
   #How was step size chosen? Numer of iterations(training batches) per epoch= len(training_set)/batch_size
  #So following from above, step size up= Number iter per epoch/2

  scheduler: "ReduceLROnPlateau"
  scheduler_mode: "min"
  scheduler_factor: 0.5 #Halving the lr upon plateauing only for ReduceLR On plateau
  scheduler_patience: 3 #Waiting for N epochs for no improvement
  early_stopping_patience: 5

  wandb_project: "UNet_Deterministic_Pretraining_Dataset"
  wandb_run_name: "Exp_01_Pretraining_UNet_Deterministic_FULL"

# Placeholder for the paths in the untracked .paths.yaml file
data: {}
