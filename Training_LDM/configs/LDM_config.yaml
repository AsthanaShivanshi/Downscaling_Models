defaults:
  - paths: paths.yaml
  - _self_

experiment:
  batch_size: 32
  num_workers: 4

variables:
  input:
    precip: RhiresD
    temp: TabsD
    temp_min: TminD
    temp_max: TmaxD
  target:
    precip: RhiresD
    temp: TabsD
    temp_min: TminD
    temp_max: TmaxD

preprocessing:
  nan_to_num: true
  nan_value : 0.0

data:
  train:
    input: ${paths.data.train.input}
    target: ${paths.data.train.target}
  val:
    input: ${paths.data.val.input}
    target: ${paths.data.val.target}
  test:
    input: ${paths.data.test.input}
    target: ${paths.data.test.target}
  static:
    elevation: ${paths.data.static.elevation}

encoder:
  _target_: Training_LDM.models.components.ae.SimpleConvEncoder
  in_dim: 4
  levels: 2
  min_ch: 16
  ch_mult: 4

decoder:
  _target_: Training_LDM.models.components.ae.SimpleConvDecoder
  in_dim: 64
  levels: 2
  min_ch: 16

conditioner:
  _target_: Training_LDM.models.components.ldm.conditioner.AFNOConditionerNetBase
  autoencoder: ${encoder}
  embed_dim: 128
  analysis_depth: 4
  train_autoenc: false
  afno_fusion: false

#Denoising Unet should expect the dims of the VAE output (latent): AsthanaSh
denoiser:
  _target_: Training_LDM.models.components.ldm.denoiser.UNetModel
  in_channels: 64
  out_channels: 64
  model_channels: 64
  num_res_blocks: 2
  attention_resolutions: [1,2,4]
  context_ch: [128,128,128,128]
  channel_mult: [1,2,4,4]
  conv_resample: true
  dims: 2
  use_fp16: false
  num_heads: 4

sampler:
  _target_: Training_LDM.models.components.ldm.denoiser.DDIMSampler
  model: ${denoiser}
  schedule: "linear"
  device: "cuda"

ema:
  _target_: Training_LDM.models.components.ldm.denoiser.LitEma
  model: ${denoiser}
  decay: 0.9999
  use_num_updates: true

datamodule:
  _target_: Training_LDM.DownscalingDataModule.DownscalingDataModule #Path to the exact class, not the module file : AsthanaSh
  train_input: ${data.train.input}
  train_target: ${data.train.target}
  val_input: ${data.val.input}
  val_target: ${data.val.target}
  test_input: ${data.test.input}
  test_target: ${data.test.target}
  elevation: ${data.static.elevation}
  batch_size: ${experiment.batch_size}
  num_workers: ${experiment.num_workers}
  preprocessing:
    variables: ${variables}
    preprocessing: ${preprocessing}

  
callbacks:
  model_checkpoint:
    _target_: lightning.pytorch.callbacks.ModelCheckpoint
    dirpath: Training_LDM/trained_ckpts
    filename: LDM_checkpoint
    save_top_k: 1
    monitor: val/loss
    mode: min

model:
#Need to pass VAE autoencoder , not encoder and decoder : AsthanaSh
  _target_: Training_LDM.models.ldm_module.LatentDiffusion
  denoiser: ${denoiser}
  autoencoder:
    _target_: Training_LDM.models.ae_module.AutoencoderKL
    encoder: ${encoder}
    decoder: ${decoder}
    unet_regr: Training_LDM/trained_ckpts/Training_LDM.models.components.unet.DownscalingUnetLightning_checkpoint.ckpt
  #VAE ckpt loaded from the ae_load_state_file 
  ae_load_state_file: Training_LDM/trained_ckpts/Training_LDM.models.ae_module.AutoencoderKL_checkpoint.ckpt
  #Output from LDM : [batch_size, 4, height, width]